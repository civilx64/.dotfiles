" Don't try to be vi compatible
set nocompatible

" Helps force plugins to load correctly when it is turned back on below
filetype off

"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.

" Keep Plugin commands between vundle#begin()/end().
" plugin on GitHub repo
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'Shougo/deoplete.nvim'
Plugin 'zchee/deoplete-jedi'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'ervandew/supertab'
"Plugin 'SirVer/ultisnips'
"Plugin 'vim-syntastic/syntastic'
Plugin 'w0rp/ale'

"Plugin 'kien/ctrlp.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'jmcantrell/vim-virtualenv'

"typescript support
Plugin 'leafgarland/typescript-vim'
Plugin 'Quramy/tsuquyomi'

"Plugin 'vim-scripts/indentpython.vim'
"Plugin 'nvie/vim-flake8'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'flazz/vim-colorschemes'
Plugin 'dhruvasagar/vim-table-mode'
"Plugin 'lepture/vim-jinja'
"Plugin 'Rykka/riv.vim'
"Plugin 'vim-scripts/LargeFile'
"Plugin 'dag/vim-fish'
"Plugin 'tmhedberg/SimpylFold'
"Plugin 'vim-scripts/xml.vim'
"Plugin 'ekalinin/Dockerfile.vim'

" All of your Plugins must be added before the following line
call vundle#end()		" required
filetype plugin indent on	" required for plugins to load correctly
filetype plugin on

" Brief help
" :PluginList		- lists configured plugins
" :PluginInstall	- installs plugins; append `!` to update or
"				just :PluginUpdate
" :PluginSearch foo	- searches for foo; append `!` to refresh local cache
" :PluginClean		- confirms removal of unused plugins; append `!` to
" 				auto-approve removal
"
" See :h vundle for more details or wiki for FAQ
"
" non-Plugin stuff goes after this line

syntax on

" pick a leader key
let mapleader = "\\"

" Security
set modelines=0

" Show line numbers
set number
" Show relative line numbers
set relativenumber

" Switch relative and absolute numbers when changing focus or modes
" https://jeffkreeftmeijer.com/vim-number/
" accessed 2017-10-3
augroup numbertoggle
        autocmd!
        autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
        autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup end

" Show file stats
set ruler

" Encoding
set encoding=utf-8

" Whitespace
set wrap
" set textwidth=79

" set tabs to have 4 spaces
set ts=4

" expand tabs into spaces
set expandtab

" Status bar
set laststatus=2

" Searching
" highlight all search matches
set hlsearch

" move cursor to the next match while searching
set incsearch

" case-insensitive search
set ignorecase

" case-sensitive search if the search string contains mixed case
set smartcase

" when a bracket is inserted, briefly jump to the matching one
set showmatch

" specify where splits should occur
set splitbelow
set splitright

" split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with spacebar
nnoremap <space> za

" color schemes and themes
colorscheme jellybeans

"set background=light

" 256 colors in terminal for tmux
if $TERM == 'screen'
set t_Co=256
endif


" highlight current line when in insert mode
set cursorline
highlight CursorLine ctermbg=235 ctermfg=None

autocmd InsertEnter * highlight CursorLine ctermbg=237 ctermfg=None
autocmd InsertLeave * highlight Cursorline ctermbg=235 ctermfg=None

" cursor styling
:set guicursor=a:block-blinkwait175-blinkoff150-blinkon175

" folding and indents for XML data
" per
" https://stackoverflow.com/questions/32154285/folding-expanding-and-colapsing-xml-tags-in-vim-xml-parsing
" accessed 2017-10-11
augroup XML
        autocmd!
        autocmd FileType xml let g:xml_syntax_folding=1
        autocmd FileType xml setlocal foldmethod=syntax
        autocmd FileType xml :syntax on
        autocmd FileType xml :%foldopen!
augroup END

" use xmllint to indent XML files
" use :gg=G in vim to prettify (indent) xml files
au FileType xml setlocal equalprg=xmllint\ --format\ -\ 2>/dev/null

" force filetype for typscript
au BufRead,BufNewFile *.ts setfiletype typescript

" Nerdtree settings
" https://medium.com/@victormours/a-better-nerdtree-setup-3d3921abc0b9
let NERDTreeIgnore=['\.pyc$', '\~$']
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
" let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMapActivateNode='<space>'

nnoremap <Leader>f :NERDTreeToggle<Enter>

" open NERDTree when vim opens without a file
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" flag unnecessary white space
" won't work unless there is a highlight group named `BadWhiteSpace`
" au BufNewFile,BufRead *.py,*.pyw,*.c,*.h match BadWhiteSpace /\s\+$/

" use bash shell
set shell=/bin/bash

" point YouCompleteMe server to python path
let g:ycm_server_python_interpreter = '/usr/bin/python3'

" point neovim to its specific virualenv
let g:python3_host_prog = "~/anaconda3/envs/neovim3/python"

" use deoplete
let g:deoplete#enable_at_startup = 1

" completions.python
let g:deoplete#sources#jedi#show_docstring = 1

" add syntastic messages to status line
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" syntastic options
let g:syntastic_always_populate_loc_list=1
"let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0
let g:syntastic_loc_list_height=3

" use powerline fonts in airline
let g:airline_powerline_fonts = 1

" set airline theme
let g:airline_theme='powerlineish'

" show ALE errors and warnings in statusline
let g:airline#extensions#enabled = 1

" markdown preview
let vim_markdown_preview_hotkey='<C-m>'

" strip trailing whitespace on certain filetypes prior to save
autocmd FileType c,cpp,java,md,php,py autocmd BufWritePre <buffer> %s/\s\+$//e

" speed up editing for large files
let g:LargeFile=20

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnips 
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'

